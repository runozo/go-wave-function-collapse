name: Test

on: [push, pull_request]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.22.x']
    name: Test with Go ${{ matrix.go }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      DISPLAY: ':99.0'
    defaults:
      run:
        shell: bash
    steps:
      - name: Git
        run: |
          # See actions/checkout#135
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libasound2-dev libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev

      - name: Install wasmbrowsertest
        run: |
          wasmbrowsertest_version=6e494bb3a5ddfe6cccb449250dbdcaa5777b593d
          go install github.com/agnivade/wasmbrowsertest@${wasmbrowsertest_version}
          mv $(go env GOPATH)/bin/wasmbrowsertest${{ runner.os == 'Windows' && '.exe' || '' }} $(go env GOPATH)/bin/go_js_wasm_exec${{ runner.os == 'Windows' && '.exe' || '' }}
          go install github.com/agnivade/wasmbrowsertest/cmd/cleanenv@${wasmbrowsertest_version}

      - name: Xvfb
        if: runner.os == 'Linux'
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: go build
        run: |
          go build -v ./...
          # Compile without optimization to check potential stack overflow.
          # The option '-gcflags=all=-N -l' is often used at Visual Studio Code.
          # See also https://go.googlesource.com/vscode-go/+/HEAD/docs/debugging.md#launch and the issue #2120.
          go build "-gcflags=all=-N -l" -v ./...
          env GOOS=js GOARCH=wasm go build -v ./...
          env GOOS=windows GOARCH=386 go build -v ./...
          env GOOS=windows GOARCH=amd64 go build -v ./...
          env GOOS=windows GOARCH=arm go build -v ./...
          env GOOS=windows GOARCH=arm64 go build -v ./...

      - name: go build (macOS)
        if: runner.os == 'macOS'
        run: |
          env CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -v ./...

      - name: go build (NintendoSDK)
        if: runner.os == 'Linux'
        run: |
          go build -tags=nintendosdk -v ./...

      - name: go build (PlayStation 5)
        if: runner.os == 'Linux'
        run: |
          go build -tags=playstation5 -v ./...

      - name: go test (Linux)
        if: runner.os == 'Linux'
        run: |
          go test -shuffle=on -v -p=1 ./...

      - name: go test (Linux 386)
        if: runner.os == 'Linux'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install gcc-multilib
          sudo apt-get install libasound2-dev:i386 libgl1-mesa-dev:i386 libxcursor-dev:i386 libxi-dev:i386 libxinerama-dev:i386 libxrandr-dev:i386 libxxf86vm-dev:i386
          env CGO_ENABLED=1 GOARCH=386 go test -shuffle=on -v -p=1 ./...

      - name: go test (Linux OpenGL ES)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libgles2-mesa-dev
          env EBITENGINE_GRAPHICS_LIBRARY=opengl EBITENGINE_OPENGL=es go test -shuffle=on -v -p=1 ./...

      - name: go test (Windows)
        if: runner.os == 'Windows'
        run: |
          go test -shuffle=on -v ./...
          env EBITENGINE_DIRECTX=version=12 go test -shuffle=on -v ./...

      - name: go test (Windows 386)
        if: runner.os == 'Windows'
        run: |
          env GOARCH=386 go test -shuffle=on -v ./...
          env GOARCH=386 EBITENGINE_DIRECTX=version=12 go test -shuffle=on -v ./...

      - name: go test (Wasm)
        if: ${{ runner.os != 'macOS' && runner.os != 'Windows' }}
        run: |
          # Wasm tests don't work on macOS with the headless mode enabled, but the headless mode cannot be disabled in GitHub Actions (#2972).
          # Wasm tests don't work on Windows well due to mysterious timeouts (#2982).
          env GOOS=js GOARCH=wasm cleanenv -remove-prefix GITHUB_ -remove-prefix JAVA_ -remove-prefix PSModulePath -remove-prefix STATS_ -remove-prefix RUNNER_ -- go test -shuffle=on -v ./...
      - name: Release
        uses: goreleaser/goreleaser-action@v6
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          # 'latest', 'nightly', or a semver
          version: '~> v2'
          args: release --clean --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

