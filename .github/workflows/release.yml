name: Release Go app

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+rc[0-9]+"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Git
        uses: actions/checkout@v4
      - name: Extract tag and details
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "No tag found"
            exit 1
          fi
  
  # build-windows-binary:
  #   runs-on: windows-2019
  #   steps:
  #     - name: Git
  #       uses: actions/checkout@v4
      
  #     - name: Setup Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: 1.22
  #     - name: Display Go version
  #       run: go version
  #     - name: Install dependencies
  #       run: |
  #         go get .
  #         go mod tidy
  #     - name: Build
  #       run: go build -o dist/ -v ./... 
  
  build-linux-binary:
    runs-on: ubuntu-latest
    steps:
      - name: Git
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22
      - name: Display Go version
        run: go version
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev libx11-dev xserver-xorg-dev xorg-dev libx11-xcb-dev libxcb-randr0-dev libxcb1-dev
          go get .
          go mod tidy
      - name: Build app
        run: go build -o dist/ -v ./...
      - name: Create Github release
        id: release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create 
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: go-wave-function-collapse
          path: |
            ./dist/go-wave-function-collapse*

  # build-darwin-binary:
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - run: git fetch --force --tags
  #     - uses: actions/setup-go@v3
  #       with:
  #         go-version: 1.22
  #         cache: true

  #     - name: Upload
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: go-wave-function-collapse
  #         path: |
  #           ./dist/go-wave-function-collapse* 
  
  merge-and-release:
    needs: [build-linux-binary] #, build-darwin-binary, build-windows-binary]
    name: Publish Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - run: git fetch --force --tags
    - name: Download binaries
      uses: actions/download-artifact@v3
      with:
        name: go-wave-function-collapse
        path: ./dist/
    - name: Generate checksums
      uses: jmgilman/actions-generate-checksum@v1
      with:
        patterns: |
          dist/*.zip
          dist/*.tar.gz
    - name: Check directory tree
      run: tree
    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          checksum.txt
          dist/*.zip
          dist/*.tar.gz

    - uses: eregon/keep-last-n-releases@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        n: 3
        remove_tags_without_release: false